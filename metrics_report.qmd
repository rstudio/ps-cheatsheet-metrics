---
title: "Public Sector Cheatsheet Metrics"
format:
  html:
    code-fold: false
    code-tools: true
engine: knitr
editor_options: 
  chunk_output_type: console
---
data pulled at `r format(Sys.time(), tz='America/New_York', usetz = TRUE)`  

```{r}
#| echo: false
#| eval: true
#| warning: false
#| error: false

library(httr)
library(tidyverse)
library(lubridate)
library(reactable)
library(ggtext)
library(glue)

should_i_process <- FALSE # to make a conditional chunk later on
```

```{r}
#| echo: false
#| warning: false
#| error: false

# content guid for the public sector cheatsheet
content_guid <- "fb6b1150-b7de-465e-b64d-5e2b0a22eb87"

# request info about content visits from the Connect API endpoint for content instrumentation
my_response <- GET(
  paste0(
    Sys.getenv("CONNECT_SERVER"), # posit not rstudio
    "/__api__/v1/instrumentation/content/visits?content_guid=", # endpoint for info on content visits
    content_guid # unique ID for my content item
  ),
    add_headers(
      Authorization = paste("Key", Sys.getenv("CONNECT_API_KEY"))
    )
)

```

```{r}
#| echo: false
#| warning: false
#| error: false

if (my_response$status_code == 200) {
  should_i_process <- TRUE # since we have results, let's flip this to true so that the next chunk will be rendered
  my_results <- content(my_response)
  message("response was 200, results generated")
} else {
  message(
    paste0("response not 200, was: ", my_response$status_code)
  )
}

```

```{r}
#| echo: false
#| warning: false
#| error: false
#| eval: !expr should_i_process

# first, perhaps only, page of results
visits_list <- my_results$results

# is there only one page of results?
do_pagination <- !is_null(my_results$paging[["next"]])

```

```{r}
#| echo: false
#| warning: false
#| error: false
#| eval: !expr do_pagination

# Continue to page through additional records
# while we have a "next" reference
while(!is.null(my_results$paging[["next"]])) {
  
  my_response <- GET(
    my_results$paging[["next"]],
    add_headers(
      Authorization = paste("Key", Sys.getenv("CONNECT_API_KEY"))
    )
  )
  my_results <- content(my_response)
  visits_list <- c(visits_list, my_results$results)
  
}

```

```{r}
#| echo: false
#| warning: false
#| error: false
#| eval: !expr should_i_process

# make a tibble from the list of visits
visits_log <- map_dfr(
  visits_list,
  ~ tibble(
    user_guid = .x$user_guid,
    time = .x$time,
    contnet_id = .x$content_guid
    )
  )

# missing user IDs means anonymous viewers, 
# let's refer to anonymous and named
visits_log <- visits_log |> 
  mutate(visitor = if_else(!is.na(user_guid), "Named", "Anonymous")) |> 
  select(visitor, time)

# convert to ET time and use just days, not hours and minutes
visits_log <- visits_log |> 
  mutate(
    server_time_utc = time,
    eastern_time = force_tz(time = ymd_hms(server_time_utc, tz = "America/New_York"), tzone = "GMT"),
    hour = hour(eastern_time),
    weekday = weekdays(eastern_time),
    date = as.Date(eastern_time)
  ) |>
  select(-time) |> 
  arrange(desc(eastern_time))

```

Total visitors: `r nrow(visits_log)` visits since `r min(visits_log$date)`

<br>

```{r}
#| echo: false
#| warning: false
#| error: false
#| eval: !expr should_i_process
#| column: page
#| fig-width: 8
#| fig-asp: 0.562
#| out-width: 100%


visits_log |> 
  count(date, visitor) |> 
  arrange(date, visitor) |> 
  ggplot(aes(x = date, y = n, color = visitor)) +
  geom_line(aes(group = visitor)) +
  geom_point(aes(color = visitor)) +
  labs(
    x = NULL,
    y = NULL,
    title = "**Page visits on the Public Sector Cheatsheet by day**",
    subtitle = "<span style ='color:#404041;'>Customers will be <b><span style = 'color:#EE6331;'>Anonymous visitors</span></b>. Posit employess visiting while<br>logged into Connect will be <b><span style = 'color:#447099;'>Named visitors</span></b>, otherwise they are anonymous, too.</span>"
  ) +
  scale_color_manual(
    limits = c("Anonymous", "Named"),
    values = c("#EE6331", "#447099"),
    guide = "none"
  ) +
  theme_minimal(base_size = 16) +
  theme(
    plot.title = element_markdown(lineheight = 1.6),
    plot.subtitle = element_markdown(lineheight = 1.2, size = 12)
  )

```

<br>

```{r}
#| echo: false
#| warning: false
#| error: false
#| eval: !expr should_i_process
#| column: page
#| fig-asp: 0.4
#| layout-nrow: 1

visits_log |>
  ggplot(aes(visitor)) +
  geom_bar(aes(fill = visitor), width = .25) +
  scale_fill_manual(
    limits = c("Anonymous", "Named"),
    values = c("#EE6331", "#447099"),
    aesthetics = "fill",
    guide = "none"
  ) +
  labs(
    x= NULL,
    y = NULL,
    title = paste0(
      "**", nrow(visits_log), "**",
      " Total Visitors"
    )
  ) +
  coord_flip() +
  theme_minimal(base_size = 21) +
  theme(
    plot.title = element_markdown(lineheight = 1.6),
    panel.grid = element_blank()
  )

day_limits <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
day_labels <- c("Mo", "Tu", "We", "Th", "Fr", "Sa", "Su")

visits_log |>
  mutate(weekday = factor(weekday, levels = day_limits, labels = day_labels)) |> 
  count(weekday) |> 
  ggplot(aes(x = weekday, y = n)) +
  geom_col(fill = "#404041", width = .25) +
  scale_x_discrete(limits = day_labels, labels = day_labels) +
  labs(
    x= NULL,
    y = NULL,
    title = "**Visitors by Weekday**"
  ) +
  theme_minimal(base_size = 18) +
  theme(
    plot.title = element_markdown(lineheight = 1.6),
    panel.grid = element_blank()
  )

```
